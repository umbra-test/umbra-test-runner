"use strict";Object.defineProperty(exports,"__esModule",{value:!0});class e{exec(e,t){if(Object.defineProperty(e,"name",{value:t,writable:!1}),1===e.length)return new Promise((t,s)=>{e(e=>{e instanceof Error?s(e):t(e)})});try{return Promise.resolve(e())}catch(e){return Promise.reject(e)}}}class t extends Error{constructor(e,t,s){super(e),this.timeoutMs=s}}class s{wrap(e,s){if(s<=0)return e;const i=Date.now();let r=null;const n=new Promise((e,n)=>{r=setTimeout(()=>{const e=Date.now()-i;n(new t(`Async task timeout exceeded! Elapsed: ${e}, timeout: ${s}ms.`,e,s))},s)});return e.catch(()=>{clearTimeout(r)}),Promise.race([e,n]).then(e=>(clearTimeout(r),e))}}const i={timeoutMs:100,stopOnFirstFail:!1};function r(e,t){if(!e)return t||[];if(!t)return e;for(const s of t)-1===e.indexOf(s)&&e.push(s);return e}function n(e,t){if(!e)return[];const s=e.indexOf(t);return-1!==s&&e.splice(s,1),e}class o{constructor(){this.onListeners={},this.onceListeners={}}on(e,t){this.onListeners[e]=r(this.onListeners[e],[t])}once(e,t){this.onceListeners[e]=r(this.onceListeners[e],[t])}off(e,t){this.onListeners[e]=n(this.onListeners[e],t),this.onceListeners[e]=n(this.onceListeners[e],t)}emit(e,...t){if(this.onListeners[e])for(const s of this.onListeners[e])s.call(null,...t);if(this.onceListeners[e]&&this.onceListeners[e].length>0){for(const s of this.onceListeners[e])s.call(null,...t);this.onceListeners[e]=[]}}emitAndWaitForCompletion(e,...t){const s=[];if(this.onListeners[e])for(const i of this.onListeners[e])try{s.push(Promise.resolve(i.call(null,...t)))}catch(e){s.push(Promise.reject(e))}if(this.onceListeners[e]&&this.onceListeners[e].length>0){for(const i of this.onceListeners[e])try{s.push(Promise.resolve(i.call(null,...t)))}catch(e){s.push(Promise.reject(e))}this.onceListeners[e]=[]}return Promise.all(s).then(e=>{})}}var u=function(e,t,s,i){return new(s||(s=Promise))((function(r,n){function o(e){try{h(i.next(e))}catch(e){n(e)}}function u(e){try{h(i.throw(e))}catch(e){n(e)}}function h(e){var t;e.done?r(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(o,u)}h((i=i.apply(e,t||[])).next())}))};const h=["before","beforeEach","after","afterEach"];exports.TestRunner=class{constructor(t,r=new o){this.asyncPromisifier=new e,this.timeoutPromisifier=new s,this.testQueueStack=[],this.queueStacks={before:[],beforeEach:[],after:[],afterEach:[]},this.currentTest=null,this.testRunCancelled=!1,this.describe=(e,t)=>{this.throwIfTestInProgress("describe"),this.pushToCurrentTestQueue("describe",e,t)},this.describeOnly=(e,t)=>{this.throwIfTestInProgress("describe.only"),this.pushToCurrentTestQueue("describe",e,t,!0)},this.it=(e,t,s)=>{this.throwIfTestInProgress("it"),this.pushToCurrentTestQueue("it",e,t,!1,s?s.timeoutMs:void 0)},this.itOnly=(e,t,s)=>{this.throwIfTestInProgress("it.only"),this.pushToCurrentTestQueue("it",e,t,!0,s?s.timeoutMs:void 0)},this.runNextTestQueue=()=>u(this,void 0,void 0,(function*(){if(0===this.testQueueStack.length)return;let e=!1;const t=this.testQueueStack.shift();if(null!==t.firstOnlyIndex)e=yield this.executeTest(t,t.tests[t.firstOnlyIndex]);else for(let s=0;s<t.tests.length;s++)e=e||(yield this.executeTest(t,t.tests[s]));e&&(yield this.evaluateQueueWithTimeout("after"))})),this.throwIfTestInProgress=e=>{if(this.currentTest)throw new Error(`Cannot add an ${e} block while executing a test!`)},this.resetRunResults=()=>{this.runResults={elapsedTimeMs:0,totalTests:0,totalSuccesses:0,totalFailures:0,totalTimeouts:0,failureInfo:[],timeoutInfo:[]}},this.config=function(e,t){if(!t||"object"!=typeof t)return e;if("object"==typeof e.timeoutMs&&"object"==typeof t.timeoutMs)for(const s of["it","before","beforeEach","after","afterEach"])"number"==typeof t.timeoutMs[s]&&(e.timeoutMs[s]=t.timeoutMs[s]);else void 0!==t.timeoutMs&&(e.timeoutMs=t.timeoutMs);return e.stopOnFirstFail!==t.stopOnFirstFail&&(e.stopOnFirstFail=t.stopOnFirstFail),e}(i,t),this.eventEmitter=r,this.it.only=this.itOnly,this.describe.only=this.describeOnly,this.resetRunResults()}setCurrentFile(e){this.lastFilePathSet=e}on(e,t){this.eventEmitter.on(e,t)}once(e,t){this.eventEmitter.once(e,t)}off(e,t){this.eventEmitter.off(e,t)}before(e){this.throwIfTestInProgress("before");const t=this.queueStacks.before;0===t.length?t.push([e]):t[0].push(e)}beforeEach(e){this.throwIfTestInProgress("beforeEach");const t=this.queueStacks.beforeEach;0===t.length?t.push([e]):t[0].push(e)}after(e){this.throwIfTestInProgress("after");const t=this.queueStacks.after;0===t.length?t.push([e]):t[0].push(e)}afterEach(e){this.throwIfTestInProgress("afterEach");const t=this.queueStacks.afterEach;0===t.length?t.push([e]):t[0].push(e)}run(){if(this.currentRun)throw new Error("Can't start a test run if one is already in progress!");const e=Date.now();return this.currentRun=this.runNextTestQueue().then(()=>{const t=this.runResults;return t.elapsedTimeMs=Date.now()-e,this.currentRun=null,this.resetRunResults(),t}).catch(e=>{throw this.currentRun=null,e}),this.currentRun}getCurrentTestInfo(){if(!this.currentTest)throw new Error("Can't obtain TestInfo if not actively in a test!");return this.currentTest}reset(){if(this.currentRun)throw new Error("Can't reset if a test run is already in progress!");this.resetRunResults(),this.testRunCancelled=!1,this.testQueueStack=[];for(const e of h)this.queueStacks[e]=[[]]}cancel(){return this.currentRun?(this.testRunCancelled=!0,this.currentRun.then(e=>(this.reset(),e))):Promise.reject(new Error("Not currently executing a test run! Unable to cancel accordingly."))}pushToCurrentTestQueue(e,t,s,i,r){if(0===this.testQueueStack.length){const e={titleChain:[],tests:[],evaluatedBefores:!1,firstOnlyIndex:i?0:null};this.testQueueStack.push(e)}const n=this.testQueueStack[this.testQueueStack.length-1],o={title:t,type:e,callback:s,absoluteFilePath:this.lastFilePathSet};i&&null===n.firstOnlyIndex&&(n.firstOnlyIndex=n.tests.length),r>0&&(o.timeoutMs=r),n.tests.push(o)}executeTest(e,t){return u(this,void 0,void 0,(function*(){return t.absoluteFilePath!==this.currentlyExecutingFilePath&&(this.currentlyExecutingFilePath=t.absoluteFilePath,this.eventEmitter.emit("activeFileChanged",this.currentlyExecutingFilePath)),!this.testRunCancelled&&("describe"===t.type?this.evaluateDescribe(e,t):this.evaluateTest(e,t))}))}evaluateDescribe(e,t){return u(this,void 0,void 0,(function*(){this.testQueueStack.push({titleChain:[].concat(e.titleChain,t.title),tests:[],evaluatedBefores:!1,firstOnlyIndex:null});for(const e of h)this.queueStacks[e].push([]);this.eventEmitter.emit("beforeDescribe",t.title);const s=Date.now();yield this.asyncPromisifier.exec(t.callback,"describe"),yield this.runNextTestQueue();for(const e of h)"before"===e||"beforeEach"===e?this.queueStacks[e].pop():this.queueStacks[e].shift();const i=Date.now()-s;return this.eventEmitter.emit("afterDescribe",t.title,i),!1}))}evaluateTest(e,t){return u(this,void 0,void 0,(function*(){e.evaluatedBefores||(e.evaluatedBefores=!0,yield this.evaluateQueueWithTimeout("before")),yield this.evaluateQueueWithTimeout("beforeEach"),this.eventEmitter.emit("beforeTest",t.title),this.currentTest=t;try{yield this.executeTestCallback(t,e.titleChain),yield this.evaluateQueueWithTimeout("afterEach")}finally{this.runResults.totalTests++,this.currentTest=null}return!0}))}executeTestCallback(e,s){return u(this,void 0,void 0,(function*(){const i=Date.now(),r=e.timeoutMs>=0?e.timeoutMs:this.getTimeoutValue("it");try{yield this.timeoutPromisifier.wrap(this.asyncPromisifier.exec(e.callback,"Test: "+e.title),r),yield this.eventEmitter.emitAndWaitForCompletion("beforeTestSuccess",e.title),this.runResults.totalSuccesses++;const t=Date.now()-i;this.eventEmitter.emit("testSuccess",e.title,t)}catch(r){r instanceof t?(this.runResults.totalTimeouts++,this.runResults.timeoutInfo.push({describeChain:s,title:e.title,elapsedMs:r.elapsedMs,timeoutMs:r.timeoutMs}),this.eventEmitter.emit("testTimeout",e.title,r.elapsedMs,r.timeoutMs)):(this.runResults.totalFailures++,this.runResults.failureInfo.push({describeChain:s,title:e.title,error:r}),this.eventEmitter.emit("testFail",e.title,r,Date.now()-i)),this.config.stopOnFirstFail&&(this.testRunCancelled=!0)}}))}evaluateQueueWithTimeout(e){return this.timeoutPromisifier.wrap(this.evaluateQueue(e),this.getTimeoutValue(e))}evaluateQueue(e){const t=this.queueStacks[e];let s=Promise.resolve();if("before"===e||"beforeEach"===e)for(let i=0;i<t.length;i++){const r=t[i];for(let t=0;t<r.length;t++)s=s.then(()=>this.asyncPromisifier.exec(r[t],e))}else for(let i=t.length-1;i>=0;i--){const r=t[i];for(let t=r.length-1;t>=0;t--)s=s.then(()=>this.asyncPromisifier.exec(r[t],e))}return s}getTimeoutValue(e){const t=this.config.timeoutMs;return"number"==typeof t?t:t[e]}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
