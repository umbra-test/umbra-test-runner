"use strict";Object.defineProperty(exports,"__esModule",{value:!0});class e{exec(e,t){if(Object.defineProperty(e,"name",{value:t,writable:!1}),1===e.length)return new Promise((t,s)=>{e(e=>{e instanceof Error?s(e):t(e)})});try{return Promise.resolve(e())}catch(e){return Promise.reject(e)}}}class t extends Error{constructor(e,t,s){super(e),this.timeoutMs=s}}class s{wrap(e,s){if(s<=0)return e;const i=Date.now();let r=null;const n=new Promise((e,n)=>{r=setTimeout(()=>{const e=Date.now()-i;n(new t(`Async task timeout exceeded! Elapsed: ${e}, timeout: ${s}ms.`,e,s))},s)});return e.catch(()=>{clearTimeout(r)}),Promise.race([e,n]).then(e=>(clearTimeout(r),e))}}const i={timeoutMs:100,stopOnFirstFail:!1};function r(e,t){if(!e)return t||[];if(!t)return e;for(const s of t)-1===e.indexOf(s)&&e.push(s);return e}function n(e,t){if(!e)return[];const s=e.indexOf(t);return-1!==s&&e.splice(s,1),e}class o{constructor(){this.onListeners={},this.onceListeners={}}on(e,t){this.onListeners[e]=r(this.onListeners[e],[t])}once(e,t){this.onceListeners[e]=r(this.onceListeners[e],[t])}off(e,t){this.onListeners[e]=n(this.onListeners[e],t),this.onceListeners[e]=n(this.onceListeners[e],t)}emit(e,...t){if(this.onListeners[e])for(const s of this.onListeners[e])s.call(null,...t);if(this.onceListeners[e]&&this.onceListeners[e].length>0){for(const s of this.onceListeners[e])s.call(null,...t);this.onceListeners[e]=[]}}emitAndWaitForCompletion(e,...t){const s=[];if(this.onListeners[e])for(const i of this.onListeners[e])try{s.push(Promise.resolve(i.call(null,...t)))}catch(e){s.push(Promise.reject(e))}if(this.onceListeners[e]&&this.onceListeners[e].length>0){for(const i of this.onceListeners[e])try{s.push(Promise.resolve(i.call(null,...t)))}catch(e){s.push(Promise.reject(e))}this.onceListeners[e]=[]}return Promise.all(s).then(e=>{})}}const u=["before","beforeEach","after","afterEach"];exports.TestRunner=class{constructor(t,r=new o){this.asyncPromisifier=new e,this.timeoutPromisifier=new s,this.testQueueStack=[],this.queueStacks={before:[],beforeEach:[],after:[],afterEach:[]},this.currentTest=null,this.testRunCancelled=!1,this.describe=(e,t)=>{this.throwIfTestInProgress("describe"),this.pushToCurrentTestQueue("describe",e,t)},this.describeOnly=(e,t)=>{this.throwIfTestInProgress("describe.only"),this.pushToCurrentTestQueue("describe",e,t,!0)},this.it=(e,t,s)=>{this.throwIfTestInProgress("it"),this.pushToCurrentTestQueue("it",e,t,!1,s?s.timeoutMs:void 0)},this.itOnly=(e,t,s)=>{this.throwIfTestInProgress("it.only"),this.pushToCurrentTestQueue("it",e,t,!0,s?s.timeoutMs:void 0)},this.runNextTestQueue=()=>{if(0===this.testQueueStack.length)return Promise.resolve();const e=this.testQueueStack.shift();let t=!1;const s=(e,s)=>(s.absoluteFilePath!==this.currentlyExecutingFilePath&&(this.currentlyExecutingFilePath=s.absoluteFilePath,this.eventEmitter.emit("activeFileChanged",this.currentlyExecutingFilePath)),()=>this.testRunCancelled?Promise.resolve():"describe"===s.type?this.evaluateDescribe(e,s):this.evaluateTest(e,s).then(e=>{t=e}));if(null!==e.firstOnlyIndex)return s(e,e.tests[e.firstOnlyIndex])();let i=Promise.resolve();for(let t=0;t<e.tests.length;t++)i=i.then(s(e,e.tests[t]));return i.then(()=>t?this.evaluateQueueWithTimeout("after"):Promise.resolve())},this.throwIfTestInProgress=e=>{if(this.currentTest)throw new Error(`Cannot add an ${e} block while executing a test!`)},this.resetRunResults=()=>{this.runResults={elapsedTimeMs:0,totalTests:0,totalSuccesses:0,totalFailures:0,totalTimeouts:0,failureInfo:[],timeoutInfo:[]}},this.config=function(e,t){if(!t||"object"!=typeof t)return e;if("object"==typeof e.timeoutMs&&"object"==typeof t.timeoutMs)for(const s of["it","before","beforeEach","after","afterEach"])"number"==typeof t.timeoutMs[s]&&(e.timeoutMs[s]=t.timeoutMs[s]);else void 0!==t.timeoutMs&&(e.timeoutMs=t.timeoutMs);return e.stopOnFirstFail!==t.stopOnFirstFail&&(e.stopOnFirstFail=t.stopOnFirstFail),e}(i,t),this.eventEmitter=r,this.it.only=this.itOnly,this.describe.only=this.describeOnly,this.resetRunResults()}setCurrentFile(e){this.lastFilePathSet=e}on(e,t){this.eventEmitter.on(e,t)}once(e,t){this.eventEmitter.once(e,t)}off(e,t){this.eventEmitter.off(e,t)}before(e){this.throwIfTestInProgress("before");const t=this.queueStacks.before;0===t.length?t.push([e]):t[0].push(e)}beforeEach(e){this.throwIfTestInProgress("beforeEach");const t=this.queueStacks.beforeEach;0===t.length?t.push([e]):t[0].push(e)}after(e){this.throwIfTestInProgress("after");const t=this.queueStacks.after;0===t.length?t.push([e]):t[0].push(e)}afterEach(e){this.throwIfTestInProgress("afterEach");const t=this.queueStacks.afterEach;0===t.length?t.push([e]):t[0].push(e)}run(){if(this.currentRun)throw new Error("Can't start a test run if one is already in progress!");const e=Date.now();return this.currentRun=this.runNextTestQueue().then(()=>{const t=this.runResults;return t.elapsedTimeMs=Date.now()-e,this.currentRun=null,this.resetRunResults(),t}).catch(e=>{throw this.currentRun=null,e}),this.currentRun}getCurrentTestInfo(){if(!this.currentTest)throw new Error("Can't obtain TestInfo if not actively in a test!");return this.currentTest}reset(){if(this.currentRun)throw new Error("Can't reset if a test run is already in progress!");this.resetRunResults(),this.testRunCancelled=!1,this.testQueueStack=[];for(const e of u)this.queueStacks[e]=[[]]}cancel(){return this.currentRun?(this.testRunCancelled=!0,this.currentRun.then(e=>(this.reset(),e))):Promise.reject(new Error("Not currently executing a test run! Unable to cancel accordingly."))}pushToCurrentTestQueue(e,t,s,i,r){if(0===this.testQueueStack.length){const e={titleChain:[],tests:[],evaluatedBefores:!1,firstOnlyIndex:i?0:null};this.testQueueStack.push(e)}const n=this.testQueueStack[this.testQueueStack.length-1],o={title:t,type:e,callback:s,absoluteFilePath:this.lastFilePathSet};i&&null===n.firstOnlyIndex&&(n.firstOnlyIndex=n.tests.length),r>0&&(o.timeoutMs=r),n.tests.push(o)}evaluateDescribe(e,t){this.testQueueStack.push({titleChain:[].concat(e.titleChain,t.title),tests:[],evaluatedBefores:!1,firstOnlyIndex:null});for(const e of u)this.queueStacks[e].push([]);this.eventEmitter.emit("beforeDescribe",t.title);const s=Date.now();return this.asyncPromisifier.exec(t.callback,"describe").then(this.runNextTestQueue).then(()=>{for(const e of u)"before"===e||"beforeEach"===e?this.queueStacks[e].pop():this.queueStacks[e].shift();const e=Date.now()-s;this.eventEmitter.emit("afterDescribe",t.title,e)})}evaluateTest(e,s){let i=Promise.resolve();return e.evaluatedBefores||(e.evaluatedBefores=!0,i=i.then(()=>this.evaluateQueueWithTimeout("before"))),i.then(()=>this.evaluateQueueWithTimeout("beforeEach").then(()=>{this.eventEmitter.emit("beforeTest",s.title);const i=Date.now();this.currentTest=s;const r=s.timeoutMs>=0?s.timeoutMs:this.getTimeoutValue("it");return this.timeoutPromisifier.wrap(this.asyncPromisifier.exec(s.callback,"Test: "+s.title),r).then(()=>this.eventEmitter.emitAndWaitForCompletion("beforeTestSuccess",s.title)).then(()=>{this.runResults.totalSuccesses++;const e=Date.now()-i;this.eventEmitter.emit("testSuccess",s.title,e)}).catch(r=>{r instanceof t?(this.runResults.totalTimeouts++,this.runResults.timeoutInfo.push({describeChain:e.titleChain,title:s.title,elapsedMs:r.elapsedMs,timeoutMs:r.timeoutMs}),this.eventEmitter.emit("testTimeout",s.title,r.elapsedMs,r.timeoutMs)):(this.runResults.totalFailures++,this.runResults.failureInfo.push({describeChain:e.titleChain,title:s.title,error:r}),this.eventEmitter.emit("testFail",s.title,r,Date.now()-i)),this.config.stopOnFirstFail&&(this.testRunCancelled=!0)}).then(()=>this.evaluateQueueWithTimeout("afterEach")).then(()=>{this.runResults.totalTests++,this.currentTest=null}).catch(e=>{throw this.runResults.totalTests++,this.currentTest=null,e})})).then(()=>!0)}evaluateQueueWithTimeout(e){return this.timeoutPromisifier.wrap(this.evaluateQueue(e),this.getTimeoutValue(e))}evaluateQueue(e){const t=this.queueStacks[e];let s=Promise.resolve();if("before"===e||"beforeEach"===e)for(let i=0;i<t.length;i++){const r=t[i];for(let t=0;t<r.length;t++)s=s.then(()=>this.asyncPromisifier.exec(r[t],e))}else for(let i=t.length-1;i>=0;i--){const r=t[i];for(let t=r.length-1;t>=0;t--)s=s.then(()=>this.asyncPromisifier.exec(r[t],e))}return s}getTimeoutValue(e){return"number"==typeof this.config.timeoutMs?this.config.timeoutMs:this.config.timeoutMs[e]}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
